package rules;

import com.example.validation.fact.FeatureValidationFact;
import com.example.enums.FeatureValueType;
import java.util.regex.Pattern;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

dialect "mvel"

// Jewelry Validation Rules
rule "Validate Jewelry Purity"
    salience 80
when
    $fact : FeatureValidationFact(
        featureCode == "JEWELRY_PURITY",
        valueType == FeatureValueType.STRING,
        value != null && !value.matches("^(18K|22K|24K|925|999)$")
    )
then
    $fact.addError("Jewelry purity must be one of: 18K, 22K, 24K, 925 (Sterling), 999 (Fine)");
end

rule "Validate Jewelry Weight"
    salience 80
when
    $fact : FeatureValidationFact(
        featureCode == "JEWELRY_WEIGHT",
        valueType == FeatureValueType.NUMERIC,
        value != null && value.matches("^-?\\d*\\.?\\d+$")
    )
    eval(Double.parseDouble($fact.getValue()) <= 0 || Double.parseDouble($fact.getValue()) > 1000)
then
    $fact.addError("Jewelry weight must be between 0 and 1000 grams");
end

// Medicine Validation Rules
rule "Validate Medicine Expiry"
    salience 80
when
    $fact : FeatureValidationFact(
        featureCode == "MEDICINE_EXPIRY",
        valueType == FeatureValueType.STRING,
        value != null
    )
    eval(!isValidFutureDate($fact.getValue()))
then
    $fact.addError("Medicine expiry date must be a future date in YYYY-MM-DD format");
end

rule "Validate Medicine Dosage"
    salience 80
when
    $fact : FeatureValidationFact(
        featureCode == "MEDICINE_DOSAGE",
        valueType == FeatureValueType.STRING,
        value != null && !value.matches("^\\d+(\\.\\d+)?(mg|ml|g|mcg)$")
    )
then
    $fact.addError("Medicine dosage must be in format: number followed by unit (mg, ml, g, mcg)");
end

// Fashion Validation Rules
rule "Validate Fashion Size"
    salience 80
when
    $fact : FeatureValidationFact(
        featureCode == "FASHION_SIZE",
        valueType == FeatureValueType.STRING,
        value != null && !value.matches("^(XS|S|M|L|XL|XXL|\\d+)$")
    )
then
    $fact.addError("Fashion size must be XS, S, M, L, XL, XXL or a number");
end

rule "Validate Fashion Gender"
    salience 80
when
    $fact : FeatureValidationFact(
        featureCode == "FASHION_GENDER",
        valueType == FeatureValueType.STRING,
        value != null && !value.matches("^(Men|Women|Unisex|Boys|Girls|Kids)$")
    )
then
    $fact.addError("Gender must be one of: Men, Women, Unisex, Boys, Girls, Kids");
end

// Electronics Validation Rules
rule "Validate Electronics Warranty"
    salience 80
when
    $fact : FeatureValidationFact(
        featureCode == "ELECTRONICS_WARRANTY",
        valueType == FeatureValueType.STRING,
        value != null && !value.matches("^\\d+\\s*(month|months|year|years)$")
    )
then
    $fact.addError("Warranty period must be in format: number followed by 'month(s)' or 'year(s)'");
end

rule "Validate Electronics Power"
    salience 80
when
    $fact : FeatureValidationFact(
        featureCode == "ELECTRONICS_POWER",
        valueType == FeatureValueType.STRING,
        value != null && !value.matches("^\\d+(\\.\\d+)?\\s*(W|KW|V|A)$")
    )
then
    $fact.addError("Power rating must be in format: number followed by unit (W, KW, V, A)");
end

function boolean isValidFutureDate(String dateStr) {
    try {
        LocalDate date = LocalDate.parse(dateStr, DateTimeFormatter.ISO_DATE);
        return date.isAfter(LocalDate.now());
    } catch (Exception e) {
        return false;
    }
}
